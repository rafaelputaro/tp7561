syntax = "proto2";

option go_package = "./protopb";

import "google/protobuf/empty.proto";

service Operations {

    // Permite hacer un ping a otro nodo enviando los datos de contacto propios
    rpc Ping (PingOperands) returns (google.protobuf.Empty);
    
    // Permite compartir contactos recomendados entre dos pares recíprocamente
    rpc ShCtsReciprocally (ShCtsRecipOpers) returns (ShCtsRecipRes);

    // Permite enviar un bloque a ser guardado en un nodo dado
    rpc StoreBlock (StoreBlockOpers) returns (google.protobuf.Empty);

    // Permite enviar un bloque a ser guardado en un nodo dado
    rpc FindBlock (FindBlockOpers) returns (FindBlockRes);

    // Permite subir un nodo de la red y que este último lo suba a la red
    rpc AddFile (AddFileOpers) returns (AddFileRes);
}

// Contiene los datos del contacto que hace el ping
message PingOperands {
    required bytes sourceId = 1;
    required string sourceUrl = 2;
}

// Contiene los datos del contacto fuente y los contactos recomendados para el par destino
message ShCtsRecipOpers {
    required bytes sourceId = 1;
    required string sourceUrl = 2;
    repeated bytes contactsIds = 3;
    repeated string contactsUrls = 4;
}

// Contiene los contactos recomendados por el nodo destino
message ShCtsRecipRes {
    repeated bytes contactsIds = 1;
    repeated string contactsUrls = 2;
}

// Contiene la información sobre un bloque a guardar
message StoreBlockOpers {
    required bytes sourceId = 1;
    required string sourceUrl = 2;
    required bytes key = 3;
    required string blockName = 4;
    required bytes data = 5;
}

// Contiene la información sobre un bloque a buscar
message FindBlockOpers {
    required bytes sourceId = 1;
    required string sourceUrl = 2;
    required bytes blockKey = 3;
}

// Contiene la respuesta para la búsqueda de un bloque
message FindBlockRes {
    required string blockName = 1;
    required bytes blockData = 2;
    repeated bytes contactsIds = 3;
    repeated string contactsUrls = 4;
}

// Contiene la información sobre las partes de un archivo a subir
message AddFileOpers {
    required string fileName = 1;
    required int32 part = 2; // 0 en adelante
    required bytes data = 3;
    required bool endfile = 4;
}

// Contiene la key cuando se sube el archivo completo
message AddFileRes {
    optional bytes key = 1;
}

